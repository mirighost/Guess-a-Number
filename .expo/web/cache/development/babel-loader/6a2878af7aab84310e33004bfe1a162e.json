{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Miri\\\\guess-number\\\\App.js\";\nimport React, { useState } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport * as Font from 'expo-font';\nimport { AppLoading, Logs } from 'expo';\nimport Header from \"./components/Header\";\nimport StartGameScreen from \"./screens/StartGameScreen\";\nimport GameScreen from \"./screens/GameScreen\";\nimport GameOverScreen from \"./screens/GameOverScreen\";\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    'open-sans': require(\"./assets/fonts/OpenSans-Regular.ttf\"),\n    'open-sans-bold': require(\"./assets/fonts/OpenSans-Bold.ttf\")\n  });\n};\n\nexport default function App() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      userNumber = _useState2[0],\n      setUserNumber = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      guessRounds = _useState4[0],\n      setGuessRounds = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      dataLoaded = _useState6[0],\n      setDataLoaded = _useState6[1];\n\n  if (!dataLoaded) {\n    return React.createElement(AppLoading, {\n      startAsync: fetchFonts,\n      onFinish: function onFinish() {\n        return setDataLoaded(true);\n      },\n      onError: function onError(err) {\n        return console.log(err);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 4\n      }\n    });\n  }\n\n  var configureNewGameHandler = function configureNewGameHandler() {\n    setGuessRounds(0);\n    setUserNumber(null);\n  };\n\n  var startGameHandler = function startGameHandler(selectedNumber) {\n    setUserNumber(selectedNumber);\n  };\n\n  var gameOverHandler = function gameOverHandler(numOfRounds) {\n    setGuessRounds(numOfRounds);\n  };\n\n  var content = React.createElement(StartGameScreen, {\n    onStartGame: startGameHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 16\n    }\n  });\n\n  if (userNumber && guessRounds <= 0) {\n    content = React.createElement(GameScreen, {\n      userChoice: userNumber,\n      onGameOver: gameOverHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 4\n      }\n    });\n  } else if (guessRounds > 0) {\n    content = React.createElement(GameOverScreen, {\n      roundsNumber: guessRounds,\n      userNumber: userNumber,\n      onRestart: configureNewGameHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 4\n      }\n    });\n  }\n\n  return React.createElement(View, {\n    style: styles.screen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, React.createElement(Header, {\n    title: \"Guess a number\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }\n  }), content);\n}\nvar styles = StyleSheet.create({\n  screen: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["C:/Users/Miri/guess-number/App.js"],"names":["React","useState","Font","AppLoading","Logs","Header","StartGameScreen","GameScreen","GameOverScreen","fetchFonts","loadAsync","require","App","userNumber","setUserNumber","guessRounds","setGuessRounds","dataLoaded","setDataLoaded","err","console","log","configureNewGameHandler","startGameHandler","selectedNumber","gameOverHandler","numOfRounds","content","styles","screen","StyleSheet","create","flex"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,SAASC,UAAT,EAAqBC,IAArB,QAAiC,MAAjC;AAEA,OAAOC,MAAP;AACA,OAAOC,eAAP;AACA,OAAOC,UAAP;AACA,OAAOC,cAAP;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACxB,SAAOP,IAAI,CAACQ,SAAL,CAAe;AACrB,iBAAaC,OAAO,uCADC;AAErB,sBAAkBA,OAAO;AAFJ,GAAf,CAAP;AAIA,CALD;;AAOA,eAAe,SAASC,GAAT,GAAe;AAAA,kBACOX,QAAQ,EADf;AAAA;AAAA,MACtBY,UADsB;AAAA,MACVC,aADU;;AAAA,mBAESb,QAAQ,CAAC,CAAD,CAFjB;AAAA;AAAA,MAEtBc,WAFsB;AAAA,MAETC,cAFS;;AAAA,mBAGOf,QAAQ,CAAC,KAAD,CAHf;AAAA;AAAA,MAGtBgB,UAHsB;AAAA,MAGVC,aAHU;;AAK7B,MAAI,CAACD,UAAL,EAAiB;AAChB,WACC,oBAAC,UAAD;AACC,MAAA,UAAU,EAAER,UADb;AAEC,MAAA,QAAQ,EAAE;AAAA,eAAMS,aAAa,CAAC,IAAD,CAAnB;AAAA,OAFX;AAGC,MAAA,OAAO,EAAE,iBAACC,GAAD;AAAA,eAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAAT;AAAA,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAOA;;AAED,MAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACrCN,IAAAA,cAAc,CAAC,CAAD,CAAd;AACAF,IAAAA,aAAa,CAAC,IAAD,CAAb;AACA,GAHD;;AAKA,MAAMS,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,cAAD,EAAoB;AAC5CV,IAAAA,aAAa,CAACU,cAAD,CAAb;AACA,GAFD;;AAIA,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAACC,WAAD,EAAiB;AACxCV,IAAAA,cAAc,CAACU,WAAD,CAAd;AACA,GAFD;;AAIA,MAAIC,OAAO,GAAG,oBAAC,eAAD;AAAiB,IAAA,WAAW,EAAEJ,gBAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAd;;AAEA,MAAIV,UAAU,IAAIE,WAAW,IAAI,CAAjC,EAAoC;AACnCY,IAAAA,OAAO,GACN,oBAAC,UAAD;AAAY,MAAA,UAAU,EAAEd,UAAxB;AAAoC,MAAA,UAAU,EAAEY,eAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAGA,GAJD,MAIO,IAAIV,WAAW,GAAG,CAAlB,EAAqB;AAC3BY,IAAAA,OAAO,GACN,oBAAC,cAAD;AACC,MAAA,YAAY,EAAEZ,WADf;AAEC,MAAA,UAAU,EAAEF,UAFb;AAGC,MAAA,SAAS,EAAES,uBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD;AAOA;;AAED,SACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEM,MAAM,CAACC,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAEEF,OAFF,CADD;AAMA;AAED,IAAMC,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAChCF,EAAAA,MAAM,EAAE;AACPG,IAAAA,IAAI,EAAE;AADC;AADwB,CAAlB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport * as Font from 'expo-font';\nimport { AppLoading, Logs } from 'expo';\n\nimport Header from './components/Header';\nimport StartGameScreen from './screens/StartGameScreen';\nimport GameScreen from './screens/GameScreen';\nimport GameOverScreen from './screens/GameOverScreen';\n\nconst fetchFonts = () => {\n\treturn Font.loadAsync({\n\t\t'open-sans': require('./assets/fonts/OpenSans-Regular.ttf'),\n\t\t'open-sans-bold': require('./assets/fonts/OpenSans-Bold.ttf'),\n\t});\n};\n\nexport default function App() {\n\tconst [userNumber, setUserNumber] = useState(); // entered number by user\n\tconst [guessRounds, setGuessRounds] = useState(0); //rounds\n\tconst [dataLoaded, setDataLoaded] = useState(false);\n\n\tif (!dataLoaded) {\n\t\treturn (\n\t\t\t<AppLoading\n\t\t\t\tstartAsync={fetchFonts}\n\t\t\t\tonFinish={() => setDataLoaded(true)}\n\t\t\t\tonError={(err) => console.log(err)}\n\t\t\t/>\n\t\t);\n\t}\n\n\tconst configureNewGameHandler = () => {\n\t\tsetGuessRounds(0);\n\t\tsetUserNumber(null);\n\t};\n\n\tconst startGameHandler = (selectedNumber) => {\n\t\tsetUserNumber(selectedNumber);\n\t};\n\n\tconst gameOverHandler = (numOfRounds) => {\n\t\tsetGuessRounds(numOfRounds);\n\t};\n\n\tlet content = <StartGameScreen onStartGame={startGameHandler} />;\n\n\tif (userNumber && guessRounds <= 0) {\n\t\tcontent = (\n\t\t\t<GameScreen userChoice={userNumber} onGameOver={gameOverHandler} />\n\t\t);\n\t} else if (guessRounds > 0) {\n\t\tcontent = (\n\t\t\t<GameOverScreen\n\t\t\t\troundsNumber={guessRounds}\n\t\t\t\tuserNumber={userNumber}\n\t\t\t\tonRestart={configureNewGameHandler}\n\t\t\t/>\n\t\t);\n\t}\n\n\treturn (\n\t\t<View style={styles.screen}>\n\t\t\t<Header title='Guess a number' />\n\t\t\t{content}\n\t\t</View>\n\t);\n}\n\nconst styles = StyleSheet.create({\n\tscreen: {\n\t\tflex: 1,\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}